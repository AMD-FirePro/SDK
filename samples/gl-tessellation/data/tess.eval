#version 420 core

layout(quads, equal_spacing, ccw) in;


uniform mat4 matMVP;
uniform mat4 matView;


in block
{
    vec3 Position0;
} In[];

out block
{
    vec3 worldPosition; 
    vec3 worldNormal; 
	vec3 lightWorldPos;
} Out;

in gl_PerVertex
{
	vec4 gl_Position;
	float gl_PointSize;
	float gl_ClipDistance[];
} gl_in[];

out gl_PerVertex
{
	vec4 gl_Position;
	float gl_PointSize;
	float gl_ClipDistance[];
};

void DeCasteljau(float u, vec3 p0, vec3 p1, vec3 p2, vec3 p3, out vec3 p)
{
    vec3 q0 = mix(p0, p1, u);
    vec3 q1 = mix(p1, p2, u);
    vec3 q2 = mix(p2, p3, u);
    vec3 r0 = mix(q0, q1, u);
    vec3 r1 = mix(q1, q2, u);

    p = mix(r0, r1, u);
}
void DeCasteljau(float u, vec3 p0, vec3 p1, vec3 p2, out vec3 p)
{
    vec3 q0 = mix(p0, p1, u);
    vec3 q1 = mix(p1, p2, u);
    
    p = mix(q0, q1, u);
}
void DeCasteljau(float u, vec3 p0, vec3 p1, vec3 p2, vec3 p3, out vec3 p, out vec3 dp)
{
    vec3 q0 = mix(p0, p1, u);
    vec3 q1 = mix(p1, p2, u);
    vec3 q2 = mix(p2, p3, u);
    vec3 r0 = mix(q0, q1, u);
    vec3 r1 = mix(q1, q2, u);
    
    dp = r0 - r1;
    p = mix(r0, r1, u);
}

void DeCasteljau_BICUBIC(vec2 uv, vec3 p[16], out vec3 WorldPos, out vec3 nor)
{

	vec3 t0, t1, t2, t3;
    vec3 p0, p1, p2, p3;

    DeCasteljau(uv.x, p[ 0] , p[ 1] , p[ 2] , p[ 3] , p0, t0);
    DeCasteljau(uv.x, p[ 4] , p[ 5] , p[ 6] , p[ 7] , p1, t1);
    DeCasteljau(uv.x, p[ 8] , p[ 9] , p[10] , p[11] , p2, t2);
    DeCasteljau(uv.x, p[12] , p[13] , p[14] , p[15] , p3, t3);

    vec3 du, dv;

    DeCasteljau(uv.y, p0, p1, p2, p3, WorldPos, dv);
    DeCasteljau(uv.y, t0, t1, t2, t3, du);
	nor = normalize(cross(du, dv));

}
void main()
{	
	vec3 cps[16];
	for(int i=0; i<16;i++)
	{
	   cps[i] = In[i].Position0;
	}

	vec3 pos, nor;
	DeCasteljau_BICUBIC(gl_TessCoord, cps, pos, nor);

	gl_Position = matMVP * vec4(pos, 1.0);
	Out.worldPosition = pos;
	Out.worldNormal = normalize(nor);
	Out.lightWorldPos = mat3(matView) * vec3(0,1,1); // point light moves with camera
}
